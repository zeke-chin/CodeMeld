name: Go

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.22'

    - name: Build
      run: go build -v -ldflags="-X 'main.Version=$(git describe --tags --always --dirty)'" -o codemeld .

    - name: Test
      run: go test -v ./...

  cross-compile:
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [windows, darwin, linux]
        arch: [amd64, arm64]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.22'
    - name: Cross compile
      run: |
        GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags="-X 'main.Version=$(git describe --tags --always --dirty)'" -o codemeld-${{ matrix.os }}-${{ matrix.arch }} .
        if [ "${{ matrix.os }}" = "windows" ]; then
          mv codemeld-${{ matrix.os }}-${{ matrix.arch }} codemeld-${{ matrix.os }}-${{ matrix.arch }}.exe
        fi
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: codemeld-${{ matrix.os }}-${{ matrix.arch }}
        path: codemeld-${{ matrix.os }}-${{ matrix.arch }}*

  release:
    needs: [cross-compile]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
          assets_dir="./artifacts"
          for asset in "$assets_dir"/*/*; do
            asset_name=$(basename "$asset")
            echo "Uploading $asset_name"
            gh release upload ${{ github.ref_name }} "$asset" --clobber
          done